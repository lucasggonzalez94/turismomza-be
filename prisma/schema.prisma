generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  name               String
  email              String          @unique
  password           String
  profilePicture     ProfilePicture?
  role               Role
  two_factor_enabled Boolean         @default(false)
  two_factor_code    String?
  two_factor_expires DateTime?
  registration_date  DateTime        @default(now())
  attractions        Attraction[]    @relation("CreatorAttractions")
  comments           Comment[]
  favorites          Favorite[]
  notifications      Notification[]
  likes_dislikes     Like[]
  reports            Report[]
  advertisements     Advertisement[]
}

model Attraction {
  id             String          @id @default(uuid())
  title          String
  slug           String?
  description    String
  location       String
  category       String
  creator        User            @relation("CreatorAttractions", fields: [creatorId], references: [id])
  creatorId      String
  creation_date  DateTime        @default(now())
  services       String[]
  contactNumber  String?
  email          String?
  webSite        String?
  instagram      String?
  facebook       String?
  timeOpen       String?
  timeClose      String?
  price          Float?
  currencyPrice  CurrencyType? @default(ars)
  images         Image[]
  comments       Comment[]
  favorites      Favorite[]
  advertisements Advertisement[]
}

model Advertisement {
  id           String     @id @default(uuid())
  attraction   Attraction @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())
  startDate    DateTime
  endDate      DateTime
  amountPaid   Float
  isActive     Boolean    @default(true)
  impressions  Int        @default(0)
  clicks       Int        @default(0)
}

model Comment {
  id            String     @id @default(uuid())
  content       String
  rating        Int?
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  attraction    Attraction @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId  String
  creation_date DateTime   @default(now())
  likes         Like[]
  reports       Report[]
}

model Favorite {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  attraction   Attraction @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId String
  added_date   DateTime   @default(now())

  @@unique([userId, attractionId])
}

model Notification {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  type          NotificationType
  message       String
  read          Boolean          @default(false)
  creation_date DateTime         @default(now())
}

model Like {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  comment       Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     String
  like          Boolean
  creation_date DateTime @default(now())

  @@unique([userId, commentId])
}

model ProfilePicture {
  id        String @id @default(uuid())
  public_id String
  url       String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @unique
}

model Report {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  comment     Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String
  reason      String
  report_date DateTime @default(now())
}

model Image {
  id           String     @id @default(uuid())
  public_id    String
  url          String
  attraction   Attraction @relation(fields: [attractionId], references: [id], onDelete: Cascade)
  attractionId String
}

enum Role {
  viewer
  publisher
  admin
}

enum NotificationType {
  comment
  like
}

enum CurrencyType {
  ars
  usd
}
