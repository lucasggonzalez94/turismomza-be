generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String          @id @default(uuid())
  name                    String
  email                   String          @unique
  password                String
  profile_picture         ProfilePicture?
  role                    Role
  two_factor_enabled      Boolean         @default(false)
  two_factor_code         String?
  two_factor_expires      DateTime?
  created_at              DateTime        @default(now())
  places                  Place[]         @relation("CreatorPlaces")
  reviews                 Review[]
  favorites               Favorite[]
  notifications           Notification[]
  triggered_notifications Notification[]  @relation("TriggeredNotifications")
  likes                   Like[]
  reports                 Report[]
  advertisements          Advertisement[]
  refresh_token           RefreshToken?   @relation("UserRefreshToken")
}

model Place {
  id             String          @id @default(uuid())
  title          String
  slug           String          @unique
  description    String
  location       String
  category       String
  creator        User            @relation("CreatorPlaces", fields: [creator_id], references: [id])
  creator_id     String
  created_at     DateTime        @default(now())
  services       String[]
  contact_number String?
  email          String?
  webSite        String?
  instagram      String?
  facebook       String?
  schedule       String
  price          Float?
  currency_price CurrencyType?   @default(ars)
  images         Image[]
  reviews        Review[]
  favorites      Favorite[]
  advertisements Advertisement[]
}

model Advertisement {
  id          String   @id @default(uuid())
  place       Place    @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id    String
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  created_at  DateTime @default(now())
  start_date  DateTime
  end_date    DateTime
  amount_paid Float
  is_active   Boolean  @default(true)
  impressions Int      @default(0)
  clicks      Int      @default(0)
}

model Review {
  id            String   @id @default(uuid())
  content       String
  rating        Int?
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  place         Place    @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id      String
  creation_date DateTime @default(now())
  likes         Like[]
  reports       Report[]
}

model Favorite {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  place Place    @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id   String
  added_date DateTime @default(now())

  @@unique([user_id, place_id])
}

model Notification {
  id             String           @id @default(uuid())
  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        String
  triggered_by   User             @relation("TriggeredNotifications", fields: [triggeredBy_id], references: [id])
  triggeredBy_id String
  type           NotificationType
  message        String
  read           Boolean          @default(false)
  creation_date  DateTime         @default(now())
}

model Like {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  review        Review   @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id     String
  like          Boolean
  creation_date DateTime @default(now())

  @@unique([user_id, review_id])
}

model ProfilePicture {
  id        String @id @default(uuid())
  public_id String
  url       String
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String @unique
}

model Report {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  review      Review   @relation(fields: [review_id], references: [id], onDelete: Cascade)
  review_id   String
  reason      String
  report_date DateTime @default(now())
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique
  user_id    String   @unique
  created_at DateTime @default(now())
  expires_at DateTime
  user       User     @relation("UserRefreshToken", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Image {
  id         String @id @default(uuid())
  public_id  String
  url        String
  place Place  @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id   String
  order      Int
}

enum Role {
  viewer
  publisher
  admin
}

enum NotificationType {
  review
  like
}

enum CurrencyType {
  ars
  usd
}
