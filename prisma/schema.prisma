generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String          @id @default(uuid())
  name                    String
  email                   String          @unique
  role                    Role
  password                String?
  googleId                String?         @unique
  googleImage             String?
  profilePicture         ProfilePicture?
  bio                     String?
  location                String?
  website                 String?
  language                String[]        @default([])
  verified                Boolean?
  twoFactorEnabled      Boolean         @default(false)
  twoFactorCode         String?
  twoFactorExpires      DateTime?
  createdAt              DateTime        @default(now())
  refreshToken           String?
  places                  Place[]         @relation("CreatorPlaces")
  reviews                 Review[]
  favorites               Favorite[]
  notifications           Notification[]
  triggeredNotifications Notification[]  @relation("TriggeredNotifications")
  likes                   Like[]
  reports                 Report[]
  advertisements          Advertisement[]
}

model Place {
  id             String          @id @default(uuid())
  title          String
  slug           String          @unique
  description    String
  location       String
  category       String
  creator        User            @relation("CreatorPlaces", fields: [creatorId], references: [id])
  creatorId     String
  createdAt     DateTime        @default(now())
  services       String[]
  contactNumber String?
  email          String?
  webSite        String?
  instagram      String?
  facebook       String?
  schedule       String
  price          Float?
  currencyPrice CurrencyType?   @default(ars)
  images         Image[]
  reviews        Review[]
  favorites      Favorite[]
  advertisements Advertisement[]
}

model Advertisement {
  id          String   @id @default(uuid())
  place       Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId    String
  user        User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  startDate  DateTime
  endDate    DateTime
  amountPaid Float
  isActive   Boolean  @default(true)
  impressions Int      @default(0)
  clicks      Int      @default(0)
}

model Review {
  id            String   @id @default(uuid())
  content       String
  rating        Int?
  user          User     @relation(fields: [userId], references: [id])
  userId       String
  place         Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId      String
  creationDate DateTime @default(now())
  likes         Like[]
  reports       Report[]
}

model Favorite {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId    String
  place      Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId   String
  addedDate DateTime @default(now())

  @@unique([userId, placeId])
}

model Notification {
  id             String           @id @default(uuid())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  triggeredBy   User             @relation("TriggeredNotifications", fields: [triggeredById], references: [id])
  triggeredById String
  type           NotificationType
  message        String
  read           Boolean          @default(false)
  creationDate  DateTime         @default(now())
}

model Like {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId       String
  review        Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId     String
  like          Boolean
  creationDate DateTime @default(now())

  @@unique([userId, reviewId])
}

model ProfilePicture {
  id        String @id @default(uuid())
  publicId String
  url       String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique
}

model Report {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId     String
  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId   String
  reason      String
  reportDate DateTime @default(now())
}

model Image {
  id        String @id @default(uuid())
  publicId String
  url       String
  place     Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId  String
  order     Int
}

enum Role {
  viewer
  publisher
  admin
}

enum NotificationType {
  review
  like
}

enum CurrencyType {
  ars
  usd
}
