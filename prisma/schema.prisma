generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  name               String
  email              String         @unique
  password           String
  role               Role
  two_factor_enabled Boolean        @default(false)
  registration_date  DateTime       @default(now())
  attractions        Attraction[]   @relation("CreatorAttractions")
  comments           Comment[]
  ratings            Rating[]
  favorites          Favorite[]
  notifications      Notification[]
  likes_dislikes     LikeDislike[]
  reports            Report[]
}

model Attraction {
  id            String     @id @default(uuid())
  title         String
  description   String
  location      String
  category      String
  creator       User       @relation("CreatorAttractions", fields: [creatorId], references: [id])
  creatorId     String
  creation_date DateTime   @default(now())
  comments      Comment[]
  ratings       Rating[]
  favorites     Favorite[]
}

model Comment {
  id            String        @id @default(uuid())
  content       String
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  attraction    Attraction    @relation(fields: [attractionId], references: [id])
  attractionId  String
  creation_date DateTime      @default(now())
  likesDislikes LikeDislike[]
  reports       Report[]
}

model Rating {
  id            String     @id @default(uuid())
  stars         Int        @default(1)
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  attraction    Attraction @relation(fields: [attractionId], references: [id])
  attractionId  String
  creation_date DateTime   @default(now())
}

model Favorite {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  attraction   Attraction @relation(fields: [attractionId], references: [id])
  attractionId String
  added_date   DateTime   @default(now())
}

model Notification {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  type          NotificationType
  message       String
  read          Boolean          @default(false)
  creation_date DateTime         @default(now())
}

model LikeDislike {
  id            String          @id @default(uuid())
  user          User            @relation(fields: [userId], references: [id])
  userId        String
  comment       Comment         @relation(fields: [commentId], references: [id])
  commentId     String
  type          LikeDislikeType
  creation_date DateTime        @default(now())

  @@unique([userId, commentId])
}

model Report {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  comment     Comment  @relation(fields: [commentId], references: [id])
  commentId   String
  reason      String
  report_date DateTime @default(now())
}

enum Role {
  viewer
  publisher
  admin
}

enum NotificationType {
  comment
  rating
  update
}

enum LikeDislikeType {
  like
  dislike
}
