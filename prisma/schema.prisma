generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(uuid())
  name                   String
  email                  String          @unique
  hasPassword            Boolean         @default(false)
  password               String?
  role                   Role
  twoFactorEnabled       Boolean         @default(false)
  twoFactorCode          String?
  twoFactorExpires       DateTime?
  createdAt              DateTime        @default(now())
  bio                    String?
  language               String[]        @default([])
  location               String?
  verified               Boolean?
  website                String?
  googleId               String?         @unique
  profilePicture         ProfilePicture?
  refreshToken           RefreshToken?
  places                 Place[]         @relation("CreatorPlaces")
  reviews                Review[]
  favorites              Favorite[]
  notifications          Notification[]  @relation("UserNotifications")
  triggeredNotifications Notification[]  @relation("TriggeredNotifications")
  likes                  Like[]
  reports                Report[]
  advertisements         Advertisement[]
}

model Place {
  id             String          @id @default(uuid())
  title          String
  slug           String          @unique
  description    String
  location       String
  category       String
  createdAt      DateTime        @default(now())
  services       String[]
  email          String?
  webSite        String?
  instagram      String?
  facebook       String?
  schedule       String
  price          Float?
  contactNumber  String?
  creatorId      String
  currencyPrice  CurrencyType?   @default(ars)
  advertisements Advertisement[]
  favorites      Favorite[]
  images         Image[]
  creator        User            @relation("CreatorPlaces", fields: [creatorId], references: [id])
  reviews        Review[]
}

model Advertisement {
  id          String   @id @default(uuid())
  clicks      Int      @default(0)
  impressions Int      @default(0)
  amountPaid  Float
  createdAt   DateTime @default(now())
  endDate     DateTime
  isActive    Boolean  @default(true)
  placeId     String
  startDate   DateTime
  userId      String
  place       Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

model Review {
  id           String   @id @default(uuid())
  content      String
  rating       Int?
  creationDate DateTime @default(now())
  placeId      String
  userId       String
  likes        Like[]
  reports      Report[]
  place        Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())
  addedDate DateTime @default(now())
  placeId   String
  userId    String
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, placeId])
}

model Notification {
  id            String           @id @default(uuid())
  type          NotificationType
  message       String
  read          Boolean          @default(false)
  creationDate  DateTime         @default(now())
  triggeredById String
  userId        String
  triggeredBy   User             @relation("TriggeredNotifications", fields: [triggeredById], references: [id])
  user          User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id           String   @id @default(uuid())
  like         Boolean
  creationDate DateTime @default(now())
  reviewId     String
  userId       String
  review       Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, reviewId])
}

model ProfilePicture {
  id       String @id @default(uuid())
  publicId String
  url      String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id         String   @id @default(uuid())
  reason     String
  reportDate DateTime @default(now())
  reviewId   String
  userId     String
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
}

model Image {
  id       String @id @default(uuid())
  url      String
  publicId String
  order    Int
  placeId  String
  place    Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  viewer
  publisher
  admin
}

enum NotificationType {
  review
  like
}

enum CurrencyType {
  ars
  usd
}
